import time
import os

from concurrent.futures import ThreadPoolExecutor, ProcessPoolExecutor

def obtener_workers_optimos(tipo='cpu', multiplicador_io=5):
    """
    Calcula el n√∫mero √≥ptimo de workers para un ThreadPoolExecutor o ProcessPoolExecutor.
    
    Par√°metros:
    - tipo: 'cpu' o 'io'
    - multiplicador_io: cu√°ntos hilos por n√∫cleo usar en tareas I/O (por defecto 5)
    
    Retorna:
    - int: n√∫mero recomendado de workers
    """
    nucleos = os.cpu_count() or 1  # fallback por si retorna None

    if tipo == 'cpu':
        return nucleos  # igual al n√∫mero de n√∫cleos l√≥gicos
    elif tipo == 'io':
        return nucleos * multiplicador_io  # m√°s hilos porque muchas tareas esperan
    else:
        raise ValueError("Tipo no v√°lido. Usa 'cpu' o 'io'.")

# üîπ Funci√≥n que verifica si un n√∫mero es primo
def es_primo(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True

# üîπ Funci√≥n CPU-intensiva
def contar_primos(hasta):
    total = sum(1 for i in range(2, hasta) if es_primo(i))
    return f"Primos hasta {hasta}: {total}"

# üîπ Funci√≥n para ejecutar cualquier m√©todo con medici√≥n de tiempo
def ejecutar_metodo(nombre, funcion_ejecutora, rangos):
    print(f"\nüî∏ {nombre}")
    inicio = time.time()
    resultados = funcion_ejecutora(rangos)
    for r in resultados:
        print(r)
    print(f"‚è± Tiempo total ({nombre}): {time.time() - inicio:.2f} segundos")

# üîπ Funci√≥n para ejecuci√≥n lineal
def ejecucion_lineal(rangos):
    return [contar_primos(r) for r in rangos]

# üîπ Funci√≥n para ejecuci√≥n con hilos
def ejecucion_threadpool(rangos):
    workers = obtener_workers_optimos('io', multiplicador_io=10)
    with ThreadPoolExecutor(max_workers=workers) as executor:
        return list(executor.map(contar_primos, rangos))

# üîπ Funci√≥n para ejecuci√≥n con procesos
def ejecucion_processpool(rangos):
    workers = obtener_workers_optimos('cpu')
    with ProcessPoolExecutor(max_workers=workers) as executor:
        return list(executor.map(contar_primos, rangos))

# üîπ Punto de entrada principal
def main():
    rangos = [50000, 51000, 52000, 53000, 54000, 55000]

    ejecutar_metodo("Ejecuci√≥n lineal", ejecucion_lineal, rangos)
    ejecutar_metodo("ThreadPoolExecutor", ejecucion_threadpool, rangos)
    ejecutar_metodo("ProcessPoolExecutor", ejecucion_processpool, rangos)

if __name__ == "__main__":
    main()
